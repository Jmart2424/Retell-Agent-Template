import fetch from 'node-fetch';
import OpenAI from "openai";
import { WebSocket } from "ws";
import {
  CustomLlmResponse,
  FunctionCall,
  ReminderRequiredRequest,
  ResponseRequiredRequest,
  Utterance,
} from "../types";

// PestAway Solutions - Samantha Green LLM Client
// Generated by LLM Template Customizer
export class DemoLlmClient {
  private client: OpenAI;
  private contactSummary = "";

  // Custom field mapping - UPDATE FOR YOUR PROJECT
  private customFieldMapping: { [key: string]: string } = {
    "SeLYuAVIdqR3xz31DgX5": "Home Value",
    "K2oQYXcF7zmZgbNZJgaz": "Loan Amount",
    // Add your custom field mappings here for PestAway Solutions
  };

  constructor() {
    this.client = new OpenAI({
      apiKey: process.env.OPENAI_APIKEY,
      baseURL: "https://api.groq.com/openai/v1",
    });
  }

  // CUSTOM SYSTEM PROMPT FOR Samantha Green AT PestAway Solutions
  private systemPrompt = `## Identity & Purpose
You are Emily, a virtual assistant representing CoolZone HVAC, a trusted heating and air conditioning service provider based nationally in the US. Your purpose is to assist callers experiencing HVAC issues by gathering key information, assessing the situation, and scheduling an appointment for a tech to come out.

## Voice & Persona
- Sound professional, friendly, calm, and knowledgeable—like a helpful receptionist who's been with CoolZone HVAC for years
- Show genuine concern for the caller's HVAC issue, offering helpful guidance without sounding overly pushy
- Project confidence and reassurance—make the customer feel like they're in good hands with CoolZone HVAC

## Response Guidelines
- Keep answers concise unless further clarification is helpful
- Ask one question at a time to keep the flow natural
- Always offer a clear next step (e.g., schedule a visit, connect with a tech)

## Conversational Flow
1. Greet caller warmly and identify their HVAC issue
2. Determine urgency (heating/cooling emergency vs routine maintenance)
3. Gather location and system details
4. Schedule appropriate service appointment with CoolZone HVAC
5. Confirm details and provide next steps`;

  // CUSTOM GREETING LOGIC FOR Samantha Green
  BeginMessage(ws: WebSocket, contactJson: any = {}) {
    let contact: any = {};
    try {
      contact = contactJson.contact ?? contactJson.data ?? contactJson;
    } catch {
      contact = {};
    }

    const firstName = contact.firstName || contact.first_name || "";

    // Samantha Green greeting for PestAway Solutions
    const greeting = `Thank you for calling PestAway Solutions! This is Samantha. `;

    const res: CustomLlmResponse = {
      response_type: "response",
      response_id: 0,
      content: greeting,
      content_complete: true,
      end_call: false,
    };
    ws.send(JSON.stringify(res));
  }

  // Function definitions for PestAway Solutions
  private functions: OpenAI.Chat.Completions.ChatCompletionTool[] = [
    {
      type: "function",
      function: {
        name: "check_calendar_tidycal",
        description: "Check calendar availability for PestAway Solutions",
        parameters: {
          type: "object",
          properties: {
            requested_datetime: { type: "string" },
            service_type: { type: "string" }
          },
          required: ["requested_datetime"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "ghl_lookup",
        description: "Lookup contact information in PestAway Solutions database",
        parameters: {
          type: "object",
          properties: {
            phone: { type: "string" },
            email: { type: "string" }
          },
          required: ["phone"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "custom_function_1",
        description: "Custom function 1 for PestAway Solutions - Update description as needed",
        parameters: {
          type: "object",
          properties: {
            parameter1: { type: "string" },
            parameter2: { type: "string" }
          },
          required: ["parameter1"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "end_call",
        description: "End the call gracefully for PestAway Solutions",
        parameters: {
          type: "object",
          properties: {
            reason: { type: "string" }
          },
          required: ["reason"]
        }
      }
    }
  ];

  // WEBHOOK CONFIGURATION FOR PestAway Solutions
  private async handleFunctionCall(functionName: string, parameters: any): Promise<string> {
    const webhookEndpoints: { [key: string]: string | null } = {
      'check_calendar_tidycal': 'https://n8n-cloudhosted.onrender.com/webhook/da90f355-dafe-4c87-a964-6252dc390b25',
      'ghl_lookup': 'https://coolzone-api.railway.app/lookup',
      'custom_function_1': 'https://coolzone-api.railway.app/schedule-service',
      'end_call': null
    };

    if (functionName === 'end_call') {
      return JSON.stringify({
        success: true,
        message: parameters.reason || "Thank you for calling PestAway Solutions!"
      });
    }

    const webhookUrl = webhookEndpoints[functionName];
    if (!webhookUrl) {
      return JSON.stringify({ error: `No webhook configured for function: ${functionName}` });
    }

    try {
      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'PestAway Solutions-Samantha Green-LLM-Client'
        },
        body: JSON.stringify({
          function_name: functionName,
          parameters: parameters,
          company: 'PestAway Solutions',
          assistant: 'Samantha Green',
          timestamp: new Date().toISOString()
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      return JSON.stringify(result);
    } catch (error) {
      console.error(`Error calling ${functionName} for PestAway Solutions:`, error);
      return JSON.stringify({
        error: `Failed to execute ${functionName}`,
        details: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  // ESSENTIAL METHODS - Required by server.ts
  private ConversationToChatRequestMessages(conversation: Utterance[]) {
    const result: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [];
    for (const turn of conversation) {
      result.push({
        role: turn.role === "agent" ? "assistant" : "user",
        content: turn.content,
      });
    }
    return result;
  }

  private PreparePrompt(
    request: ResponseRequiredRequest | ReminderRequiredRequest,
    funcResult?: FunctionCall,
  ) {
    const transcript = this.ConversationToChatRequestMessages(request.transcript);
    const requestMessages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      {
        role: "system",
        content: this.systemPrompt,
      },
    ];

    if (this.contactSummary && this.contactSummary.trim()) {
      requestMessages.push({
        role: "assistant",
        content: this.contactSummary,
      });
    }

    for (const message of transcript) {
      requestMessages.push(message);
    }

    if (funcResult) {
      requestMessages.push({
        role: "assistant",
        content: null,
        tool_calls: [
          {
            id: funcResult.id,
            type: "function",
            function: {
              name: funcResult.funcName,
              arguments: JSON.stringify(funcResult.arguments),
            },
          },
        ],
      });
      requestMessages.push({
        role: "tool",
        tool_call_id: funcResult.id,
        content: funcResult.result || "",
      });
    }

    if (request.interaction_type === "reminder_required") {
      requestMessages.push({
        role: "user",
        content: "(Now the user has not responded in a while, you would say:)",
      });
    }

    return requestMessages;
  }

  // MAIN DRAFT RESPONSE METHOD - Required by server.ts
  async DraftResponse(
    request: ResponseRequiredRequest | ReminderRequiredRequest,
    ws: WebSocket,
    funcResult?: FunctionCall,
  ) {
    console.clear();
    console.log("req", request);

    if (request.interaction_type !== "response_required" && request.interaction_type !== "reminder_required") {
      return;
    }

    const requestMessages = this.PreparePrompt(request, funcResult);

    let funcCall: FunctionCall | undefined;
    let funcArguments = "";
    let toolCallHandled = false;

    try {
      const events = await this.client.chat.completions.create({
        model: "llama3-70b-8192",
        messages: requestMessages,
        stream: true,
        temperature: 0.1,
        max_tokens: 200,
        frequency_penalty: 1.0,
        presence_penalty: 1.0,
        tools: this.functions,
      });

      for await (const event of events) {
        if (event.choices && event.choices.length >= 1) {
          const delta = event.choices[0].delta;
          if (!delta) continue;

          if (delta.tool_calls && delta.tool_calls.length > 0 && !toolCallHandled) {
            const toolCall = delta.tool_calls[0];
            if (toolCall.id && toolCall.function?.name) {
              funcArguments += toolCall.function.arguments || "";
              funcCall = {
                id: toolCall.id,
                funcName: toolCall.function.name,
                arguments: {},
              };
              continue;
            }
          } else if (funcCall && funcArguments && !toolCallHandled) {
            funcCall.arguments = JSON.parse(funcArguments);
            const functionResult = await this.handleFunctionCall(funcCall.funcName, funcCall.arguments);

            let parsedResult: any;
            try {
              parsedResult = JSON.parse(functionResult);
            } catch {
              parsedResult = { error: "Invalid response format" };
            }

            let responseContent = "";
            if (parsedResult.available) {
              responseContent = `Great! ${parsedResult.message || 'That time slot is available.'}`;
              if (parsedResult.suggested_times && Array.isArray(parsedResult.suggested_times) && parsedResult.suggested_times.length > 0) {
                responseContent += ` I also have these alternative times available: ${parsedResult.suggested_times.join(", ")}.`;
              }
            } else if (parsedResult.success && funcCall.funcName === "ghl_lookup") {
              responseContent = parsedResult.message || "Contact information found.";
            } else {
              responseContent = `I'm sorry, that time slot isn't available. Let me suggest some alternatives.`;
              if (parsedResult.suggested_times && Array.isArray(parsedResult.suggested_times) && parsedResult.suggested_times.length > 0) {
                responseContent += ` How about: ${parsedResult.suggested_times.join(", ")}?`;
              }
            }

            const res: CustomLlmResponse = {
              response_type: "response",
              response_id: request.response_id,
              content: responseContent,
              content_complete: true,
              end_call: false,
            };
            ws.send(JSON.stringify(res));
            toolCallHandled = true;
            break;
          } else if (delta.content && !toolCallHandled) {
            const res: CustomLlmResponse = {
              response_type: "response",
              response_id: request.response_id,
              content: delta.content,
              content_complete: false,
              end_call: false,
            };
            ws.send(JSON.stringify(res));
          }
        }
      }
    } catch (err) {
      console.error("Error in gpt stream: ", err);
    } finally {
      if (funcCall && funcCall.funcName === "end_call") {
        const res: CustomLlmResponse = {
          response_type: "response",
          response_id: request.response_id,
          content: "Thank you for calling PestAway Solutions!",
          content_complete: true,
          end_call: true,
        };
        ws.send(JSON.stringify(res));
      }
    }
  }
}
