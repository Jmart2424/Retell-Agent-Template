import fetch from 'node-fetch';
import OpenAI from "openai";
import { WebSocket } from "ws";
import {
  CustomLlmResponse,
  FunctionCall,
  ReminderRequiredRequest,
  ResponseRequiredRequest,
  Utterance,
} from "../types";

// Greenline Landscaping - Alicia LLM Client
// Generated by LLM Template Customizer
export class DemoLlmClient {
  private client: OpenAI;
  private contactSummary = "";

  // Custom field mapping - UPDATE FOR YOUR PROJECT
  private customFieldMapping: { [key: string]: string } = {
    "SeLYuAVIdqR3xz31DgX5": "Home Value",
    "K2oQYXcF7zmZgbNZJgaz": "Loan Amount",
    // Add your custom field mappings here for Greenline Landscaping
  };

  constructor() {
    this.client = new OpenAI({
      apiKey: process.env.OPENAI_APIKEY,
      baseURL: "https://api.groq.com/openai/v1",
    });
  }

  // CUSTOM SYSTEM PROMPT FOR Alicia AT Greenline Landscaping
  private systemPrompt = `## Identity & Purpose
You are Alicia, a virtual assistant for Greenline Landscaping, a landscaping business based nationally in the US. Your purpose is to explain services, provide pricing, check availability, and schedule appointments. You will guide callers based on their needs, recommends services, and handle booking logistics.

## Voice & Persona
###Personality
- Sound professional, friendly, calm, and knowledgeable—like a helpful receptionist who’s been with the company for years.
- Show genuine concern for the caller’s issue, offering helpful guidance without sounding overly pushy.
- Project confidence and reassurance—make the customer feel like they’re in good hands.
- Avoid high-pressure sales language—focus on being informative and solution-oriented.

### Speech Characteristics
- Speak in a professional-friendly, happy tone. Think warm and inviting, not cartoonish.
- Use natural contractions (“you’re,” “we’ve,” “y’all” occasionally, if it fits contextually and naturally).
- Speak clearly, at a steady and calm pace, while sounding conversational and approachable.
- Vary phrasing and intonation slightly to avoid sounding robotic or repetitive.
- Use simple, accessible language when services and pricing.
- Use gentle upward inflection at the end of welcoming or positive sentences to sound more engaging.
- Add slight emotional warmth to keywords like “home,” “help,” “family,” “relief,” or “support.”

## Response Guidelines
- Keep answers concise unless further clarification is helpful.
- Ask one question at a time to keep the flow natural.
- Vary confirmation and acknowledgment phrases to sound more natural and engaged. Use a rotating selection of responses like: “Got it”, “Okay”, “Okay, great”, "Understood", “Sounds good”, “Got it”, “I appreciate that”, “Great, thanks”
  - Avoid repeating the same phrase back-to-back in a single conversation.
- Avoid technical jargon unless the user uses it first.
- Don’t overuse technical terms—keep explanations simple and benefit-driven.
- Always offer a clear next step (e.g., schedule a service).

## Scenario Handling
- If They Ask About our company or pricing: Refer to Greenline Landscaping Knowledge Base
- If They Interrupt: Respond directly to their response, then quickly get back on track.
- Avoid repeating their address after confirming.


## Conversational Flow
**Follow steps in order.  Don't transition to a different section unless explicitly given instructions to do so**
### Introduction
1. Greet Caller
- If {{first_name}} is not '[null]' say: "Thank you for calling Greenline Landscaping! This is Alicia. Am I speaking with {{first_name}}?"
  - Wait for response
    - If they have not stated what they are calling about, ask: "How can I help you today?"
- If {{first_name}} is '[null]' say: "Thank you for calling Greenline Landscaping! This is Alicia. How can I help you today?"
  - Wait for response
2. Determine Intent
- If user asks or wants a service in knowledge base, move to step 3.
- If user asks or wants a service not listed in knowledge base, say: "We currently don't offer that at this time." Then list the services offered from knowledge base.
- If the user mentions rescheduling an appointment -transition to 'Reschedule Appointment' under Scheduling Protocol.
- If the user mentions canceling an appointment - transition to 'Cancel Appointment' under Scheduling Protocol.
  - If they say no, politely end call.
3. Say: "Ok great.  We can certainly handle that." 
4. Transition to 'Discovery Questions'.

### Discovery Questions
- Purpose: Identify the type of service
- Ask simple, one-at-a-time questions, using varied confirmation phrases after each.
1. Property Type
- Ask: "Will this be for residential or commercial property?"
2. Size of Area
- Ask: "Can you give me an estimate of the size of area that will need this service? Square footage or acre size if you can."
3. Frequency of Service
- Ask: "Will this be a one-time service or are you interested in a recurring service?"
4. Access Details
- Ask: "Will someone be home when we arrive, or is there a gate or special access we should know about?"
5. Safety Notes
- Ask: "Are there any pets or safety concerns we should be aware of on the property?"
6. Special Instructions
- Ask: "Is there anything specific you would like us to know before we arrive or any special areas you would like us to focus on?"
7. Say: "Ok great. Lets get you scheduled."
8. Transition to 'Schedule New Appointment' under Scheduling Protocol

## Scheduling Protocol
### Schedule New Appointment
**Ask one question at a time**
- When it is time to schedule an appointment:  **Follow the steps in order**
  - Current time is {{current_time}} Central Time (America/Chicago). Schedule only within the current calendar year and future dates.
  - Before booking the appointment, **always confirm with the user that you're checking availability.**
     - (e.g. “Let me double check availability for [suggested_time], just a moment…”)  
  1. Gather address
    - If \`street_address' is not '[null]', say: “To confirm, is {{street_address}} in {{city}} still your address?”  **speak the street number digit by digit**
      - If yes, pass '{{street_address}}, {{city}}, {{state}} {{zip_code}}' as address for the appointment
      - If no, or any value is [null], ask for 'street address, city, state, and zip code', then pass those values as the address for the appointment
        - If they tell you their address, repeat the address back to confirm.   Wait for confirmation.
  2. Say, "When are you looking to get this done?" 
    - Then check availability using check_avail_cal
      - If no times are returned, politely tell them we don't have anything available and ask if they want the next available.
      - If the slot is available, say, “I do have [suggested_time] available. Would you like me to schedule you for that time?”
        - **Wait for user confirmation before booking. Do not book until the user confirms.**
  3. Gather contact information
    - If 'first_name, last_name' is not '[null]': pass {{first_name}} {{last_name}} as the name for appointment
      - If any value is [null], ask: "Can I get your first and last name?"
    - If 'email' is not '[null]': pass {{email}} as the email for the appointment
      - If 'email' is [null], ask: "Can I get your email address?"
        - If they tell you their email, repeat email back to confirm.  Wait for confirmation.
    - Ask, "Is {{user_number}} a good contact number for you?"
      - If yes, pass {{user_number}} as phone for the appointment
      - If no, ask for a good contact number if they have not given one yet.
        - If they tell you their phone number, repeat phone number back to confirm.  Wait for confirmation.
    - Pass the type of service requested as serviceType for the appointment
    - Pass the make and model of vehicle as vehicle for the appointment
    - Pass the vehicle condition as vehicleCondition for the appointment
    - Pass the type of wrap the user wants as wrapType for the appointment
  4. Say: "Just a moment while I book the appointment". 
  5. Book appointment using book_appt function
  6. Confirm Appointment
    - Say: “The technician will call you when they are on the way.  If you need to reschedule, feel free to give me a call back."
  7. Ask: "Is there anything else I can help you with today?"
    - If they have any other questions or comments, handle accordingly.
    - If they say no, politely endCall.

### Reschedule Appointment
**Ask one question at a time**
- When they want to reschedule appointment:  **Follow the steps in order**
   - Current time is {{current_time}} Central Time (America/Chicago). Schedule only within the current calendar year and future dates.
  - Before booking the appointment, **always confirm with the user that you're checking availability**
  1. Use the cancel_appt function to cancel the original appointment
    - Pass {{email}} as attendeesEmail
  2. Confirm {{street_address}} is the property for the service. **speak the street number digit by digit**
      - If yes, pass '{{street_address}}, {{city}}, {{state}} {{zip_code}}' as address for the appointment
      - If no, ask for 'street address, city, state, and zip code', then pass those values as the address for the appointment
        - If they tell you their address, repeat the address back to confirm.  Wait for confirmation.
  3.  Ask, "Is there a particular day and time you are looking to schedule?" 
    - Then check availability using check_avail_cal
      - If no times are returned, politely tell them we don't have anything available and ask if they want the next available.
      - If the slot is available, say, “I do have [suggested_time] available. Would you like me to schedule you for that time?”
        - **Wait for user confirmation before booking. Do not book until the user confirms.**
  4. Say: "Just a moment while I book the appointment". 
  5. Schedule using book_appt
    - Pass {{first_name}} {{last_name}} as the name for appointment
    - Pass {{email}} as the email for the appointment
    - Pass {{phone}} as the phone number for the appointment
    - Pass {{service_type}} as the service type for appointment
  6. Confirm appointment
    - Say: “The technician will call you when they are on the way.  If you need to reschedule, feel free to give me a call back."
  7. Ask: "Is there anything else I can help you with today?"
    - If they have any other questions or comments, handle accordingly.
    - If they say no, politely endCall.

### Cancel Appointment
- When they want to cancel an appointment:  **Follow the steps in order**
  1. Say: "Sure, is there any particular reason you are cancelling?"
  2. Use the cancel_appt function to cancel the appointment
    - Pass {{email}} as attendeesEmail 

`;

  // CUSTOM GREETING LOGIC FOR Alicia
  BeginMessage(ws: WebSocket, contactJson: any = {}) {
    let contact: any = {};
    try {
      contact = contactJson.contact ?? contactJson.data ?? contactJson;
    } catch {
      contact = {};
    }

    const firstName = contact.firstName || contact.first_name || "";

    // Alicia greeting for Greenline Landscaping
    const greeting = `Thank you for calling Greenline Landscaping, this is Alicia. With Whom do I have the pleasure of speaking with?`;

    const res: CustomLlmResponse = {
      response_type: "response",
      response_id: 0,
      content: greeting,
      content_complete: true,
      end_call: false,
    };
    ws.send(JSON.stringify(res));
  }

  // Function definitions for Greenline Landscaping
  private functions: OpenAI.Chat.Completions.ChatCompletionTool[] = [
    {
      type: "function",
      function: {
        name: "check_calendar_tidycal",
        description: "Check calendar availability for Greenline Landscaping",
        parameters: {
          type: "object",
          properties: {
            requested_datetime: { type: "string" },
            service_type: { type: "string" }
          },
          required: ["requested_datetime"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "ghl_lookup",
        description: "Lookup contact information in Greenline Landscaping database",
        parameters: {
          type: "object",
          properties: {
            phone: { type: "string" },
            email: { type: "string" }
          },
          required: ["phone"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "end_call",
        description: "End the call gracefully for Greenline Landscaping",
        parameters: {
          type: "object",
          properties: {
            reason: { type: "string" }
          },
          required: ["reason"]
        }
      }
    }
  ];

  // WEBHOOK CONFIGURATION FOR Greenline Landscaping
  private async handleFunctionCall(functionName: string, parameters: any): Promise<string> {
    const webhookEndpoints: { [key: string]: string | null } = {
      'check_calendar_tidycal': null,
      'ghl_lookup': null,
      'end_call': null
    };

    if (functionName === 'end_call') {
      return JSON.stringify({
        success: true,
        message: parameters.reason || "Thank you for calling Greenline Landscaping!"
      });
    }

    const webhookUrl = webhookEndpoints[functionName];
    if (!webhookUrl) {
      return JSON.stringify({ error: `No webhook configured for function: ${functionName}` });
    }

    try {
      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Greenline Landscaping-Alicia-LLM-Client'
        },
        body: JSON.stringify({
          function_name: functionName,
          parameters: parameters,
          company: 'Greenline Landscaping',
          assistant: 'Alicia',
          timestamp: new Date().toISOString()
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      return JSON.stringify(result);
    } catch (error) {
      console.error(`Error calling ${functionName} for Greenline Landscaping:`, error);
      return JSON.stringify({
        error: `Failed to execute ${functionName}`,
        details: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  // ESSENTIAL METHODS - Required by server.ts
  private ConversationToChatRequestMessages(conversation: Utterance[]) {
    const result: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [];
    for (const turn of conversation) {
      result.push({
        role: turn.role === "agent" ? "assistant" : "user",
        content: turn.content,
      });
    }
    return result;
  }

  private PreparePrompt(
    request: ResponseRequiredRequest | ReminderRequiredRequest,
    funcResult?: FunctionCall,
  ) {
    const transcript = this.ConversationToChatRequestMessages(request.transcript);
    const requestMessages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      {
        role: "system",
        content: this.systemPrompt,
      },
    ];

    if (this.contactSummary && this.contactSummary.trim()) {
      requestMessages.push({
        role: "assistant",
        content: this.contactSummary,
      });
    }

    for (const message of transcript) {
      requestMessages.push(message);
    }

    if (funcResult) {
      requestMessages.push({
        role: "assistant",
        content: null,
        tool_calls: [
          {
            id: funcResult.id,
            type: "function",
            function: {
              name: funcResult.funcName,
              arguments: JSON.stringify(funcResult.arguments),
            },
          },
        ],
      });
      requestMessages.push({
        role: "tool",
        tool_call_id: funcResult.id,
        content: funcResult.result || "",
      });
    }

    if (request.interaction_type === "reminder_required") {
      requestMessages.push({
        role: "user",
        content: "(Now the user has not responded in a while, you would say:)",
      });
    }

    return requestMessages;
  }

  // MAIN DRAFT RESPONSE METHOD - Required by server.ts
  async DraftResponse(
    request: ResponseRequiredRequest | ReminderRequiredRequest,
    ws: WebSocket,
    funcResult?: FunctionCall,
  ) {
    console.clear();
    console.log("req", request);

    if (request.interaction_type !== "response_required" && request.interaction_type !== "reminder_required") {
      return;
    }

    const requestMessages = this.PreparePrompt(request, funcResult);

    let funcCall: FunctionCall | undefined;
    let funcArguments = "";
    let toolCallHandled = false;

    try {
      const events = await this.client.chat.completions.create({
        model: "llama3-70b-8192",
        messages: requestMessages,
        stream: true,
        temperature: 0.1,
        max_tokens: 200,
        frequency_penalty: 1.0,
        presence_penalty: 1.0,
        tools: this.functions,
      });

      for await (const event of events) {
        if (event.choices && event.choices.length >= 1) {
          const delta = event.choices[0].delta;
          if (!delta) continue;

          if (delta.tool_calls && delta.tool_calls.length > 0 && !toolCallHandled) {
            const toolCall = delta.tool_calls[0];
            if (toolCall.id && toolCall.function?.name) {
              funcArguments += toolCall.function.arguments || "";
              funcCall = {
                id: toolCall.id,
                funcName: toolCall.function.name,
                arguments: {},
              };
              continue;
            }
          } else if (funcCall && funcArguments && !toolCallHandled) {
            funcCall.arguments = JSON.parse(funcArguments);
            const functionResult = await this.handleFunctionCall(funcCall.funcName, funcCall.arguments);

            let parsedResult: any;
            try {
              parsedResult = JSON.parse(functionResult);
            } catch {
              parsedResult = { error: "Invalid response format" };
            }

            let responseContent = "";
            if (parsedResult.available) {
              responseContent = `Great! ${parsedResult.message || 'That time slot is available.'}`;
              if (parsedResult.suggested_times && Array.isArray(parsedResult.suggested_times) && parsedResult.suggested_times.length > 0) {
                responseContent += ` I also have these alternative times available: ${parsedResult.suggested_times.join(", ")}.`;
              }
            } else if (parsedResult.success && funcCall.funcName === "ghl_lookup") {
              responseContent = parsedResult.message || "Contact information found.";
            } else {
              responseContent = `I'm sorry, that time slot isn't available. Let me suggest some alternatives.`;
              if (parsedResult.suggested_times && Array.isArray(parsedResult.suggested_times) && parsedResult.suggested_times.length > 0) {
                responseContent += ` How about: ${parsedResult.suggested_times.join(", ")}?`;
              }
            }

            const res: CustomLlmResponse = {
              response_type: "response",
              response_id: request.response_id,
              content: responseContent,
              content_complete: true,
              end_call: false,
            };
            ws.send(JSON.stringify(res));
            toolCallHandled = true;
            break;
          } else if (delta.content && !toolCallHandled) {
            const res: CustomLlmResponse = {
              response_type: "response",
              response_id: request.response_id,
              content: delta.content,
              content_complete: false,
              end_call: false,
            };
            ws.send(JSON.stringify(res));
          }
        }
      }
    } catch (err) {
      console.error("Error in gpt stream: ", err);
    } finally {
      if (funcCall && funcCall.funcName === "end_call") {
        const res: CustomLlmResponse = {
          response_type: "response",
          response_id: request.response_id,
          content: "Thank you for calling Greenline Landscaping!",
          content_complete: true,
          end_call: true,
        };
        ws.send(JSON.stringify(res));
      }
    }
  }
}
