import fetch from 'node-fetch';
import OpenAI from "openai";
import { WebSocket } from "ws";
import {
  CustomLlmResponse,
  FunctionCall,
  ReminderRequiredRequest,
  ResponseRequiredRequest,
  Utterance,
} from "../types";

// CoolZone HVAC - Emily LLM Client
// Generated by LLM Template Customizer with Enhanced Data Management
export class DemoLlmClient {
  private client: OpenAI;
  private contactSummary = "";
  
  // Enhanced Data Management System for Multiple Webhook Responses
  private sessionData: {
    contact?: any;
    knowledgeBase?: any[];
    calendarData?: any;
    customData?: { [key: string]: any };
    conversationContext?: string;
  } = {};

  // Custom field mapping - UPDATE FOR YOUR PROJECT
  private customFieldMapping: { [key: string]: string } = {
    "SeLYuAVIdqR3xz31DgX5": "Home Value",
    "K2oQYXcF7zmZgbNZJgaz": "Loan Amount",
    // Add your custom field mappings here for CoolZone HVAC
  };

  constructor() {
    this.client = new OpenAI({
      apiKey: process.env.OPENAI_APIKEY,
      baseURL: "https://api.groq.com/openai/v1",
    });
  }

  // CUSTOM SYSTEM PROMPT FOR Emily AT CoolZone HVAC
  private systemPrompt = `## Identity & Purpose
You are Emily, a virtual assistant representing CoolZone HVAC, a trusted heating and air conditioning service provider based nationally in the US. Your purpose is to assist callers experiencing HVAC issues by gathering key information, assessing the situation, and scheduling an appointment for a tech to come out.

## Voice & Persona
- Sound professional, friendly, calm, and knowledgeable—like a helpful receptionist who's been with CoolZone HVAC for years
- Show genuine concern for the caller's HVAC issue, offering helpful guidance without sounding overly pushy
- Project confidence and reassurance—make the customer feel like they're in good hands with CoolZone HVAC
- Use available contact information and knowledge base data to personalize responses

## Response Guidelines
- Keep answers concise unless further clarification is helpful
- Ask one question at a time to keep the flow natural
- Always offer a clear next step (e.g., schedule a visit, connect with a tech)
- Reference customer's service history when available to provide personalized service
- Use knowledge base information to provide accurate technical guidance

## Conversational Flow
1. Greet caller warmly and identify their HVAC issue
2. Look up customer information if phone number is available
3. Determine urgency (heating/cooling emergency vs routine maintenance)
4. Search knowledge base for relevant troubleshooting or information
5. Gather location and system details
6. Schedule appropriate service appointment with CoolZone HVAC
7. Confirm details and provide next steps`;

  // ENHANCED DATA MANAGEMENT METHODS
  private updateSessionData(functionName: string, data: any): void {
    switch (functionName) {
      case "ghl_lookup":
        this.sessionData.contact = data.contact || data;
        this.updateContactSummary();
        break;
      case "knowledge_search":
        if (!this.sessionData.knowledgeBase) this.sessionData.knowledgeBase = [];
        this.sessionData.knowledgeBase.push(data);
        break;
      case "check_avail_cal":
        this.sessionData.calendarData = data;
        break;
      default:
        if (!this.sessionData.customData) this.sessionData.customData = {};
        this.sessionData.customData[functionName] = data;
    }
  }

  private updateContactSummary(): void {
    const contact = this.sessionData.contact;
    if (contact) {
      let summary = `Contact: ${contact.firstName || ""} ${contact.lastName || ""}`;
      if (contact.email) summary += `, Email: ${contact.email}`;
      if (contact.phone) summary += `, Phone: ${contact.phone}`;
      if (contact.serviceHistory) summary += `, Service History: ${Array.isArray(contact.serviceHistory) ? contact.serviceHistory.join(", ") : contact.serviceHistory}`;
      if (contact.preferences) summary += `, Preferences: ${contact.preferences}`;
      if (contact.notes) summary += `, Notes: ${contact.notes}`;
      this.contactSummary = summary;
    }
  }

  private getPersonalizedContext(): string {
    let context = "";
    
    if (this.sessionData.contact) {
      const c = this.sessionData.contact;
      context += `Customer: ${c.firstName || ""} ${c.lastName || ""}. `;
      if (c.serviceHistory) context += `Previous services: ${Array.isArray(c.serviceHistory) ? c.serviceHistory.join(", ") : c.serviceHistory}. `;
      if (c.preferences) context += `Preferences: ${c.preferences}. `;
    }
    
    if (this.sessionData.knowledgeBase && this.sessionData.knowledgeBase.length > 0) {
      context += "Available knowledge: " + this.sessionData.knowledgeBase.map(kb => kb.summary || kb.title || "Information available").join(", ") + ". ";
    }
    
    return context;
  }

  // CUSTOM GREETING LOGIC FOR Emily
  BeginMessage(ws: WebSocket, contactJson: any = {}) {
    let contact: any = {};
    try {
      contact = contactJson.contact ?? contactJson.data ?? contactJson;
    } catch {
      contact = {};
    }

    const firstName = contact.firstName || contact.first_name || "";

    // Store initial contact data if available
    if (contact && Object.keys(contact).length > 0) {
      this.sessionData.contact = contact;
      this.updateContactSummary();
    }

    // Emily greeting for CoolZone HVAC
    const greeting = `Thank you for calling CoolZone HVAC! This is Emily. ${firstName ? `Am I speaking with ${firstName}?` : `How can I help you today?`}`;

    const res: CustomLlmResponse = {
      response_type: "response",
      response_id: 0,
      content: greeting,
      content_complete: true,
      end_call: false,
    };
    ws.send(JSON.stringify(res));
  }

  // Function definitions for CoolZone HVAC with Enhanced Data Management
  private functions: OpenAI.Chat.Completions.ChatCompletionTool[] = [
    {
      type: "function",
      function: {
        name: "check_avail_cal",
        description: "Check calendar availability for appointment through Cal.com for CoolZone HVAC",
        parameters: {
  "type": "object",
  "properties": {
    "start": {
      "type": "string",
      "description": "Start time range in ISO 8601 format"
    },
    "end": {
      "type": "string",
      "description": "End time range in ISO 8601 format"
    }
  },
  "required": [
    "start",
    "end"
  ]
}
      }
    },
    {
      type: "function",
      function: {
        name: "ghl_lookup",
        description: "Lookup contact information in CoolZone HVAC database using GoHighLevel for personalization",
        parameters: {
          type: "object",
          properties: {
            phone: { type: "string", description: "Phone number to lookup" },
            email: { type: "string", description: "Email address to lookup" },
            name: { type: "string", description: "Customer name to lookup" }
          },
          required: ["phone"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "knowledge_search",
        description: "Search CoolZone HVAC knowledge base for information to help answer customer questions",
        parameters: {
          type: "object",
          properties: {
            query: { type: "string", description: "Search query for knowledge base" },
            category: { type: "string", description: "Category to search within (optional)" }
          },
          required: ["query"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "custom_function_1",
        description: "Custom function 1 for CoolZone HVAC - Update description as needed",
        parameters: {
          type: "object",
          properties: {
            parameter1: { type: "string" },
            parameter2: { type: "string" }
          },
          required: ["parameter1"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "end_call",
        description: "End the call gracefully for CoolZone HVAC",
        parameters: {
          type: "object",
          properties: {
            reason: { type: "string" }
          },
          required: ["reason"]
        }
      }
    }
  ];

  // ENHANCED WEBHOOK CONFIGURATION FOR CoolZone HVAC with Data Management
  private async handleFunctionCall(functionName: string, parameters: any): Promise<string> {
    const webhookEndpoints: { [key: string]: string | null } = {
      'check_avail_cal': 'https://n8n-cloudhosted.onrender.com/webhook/da90f355-dafe-4c87-a964-6252dc390b25',
      'ghl_lookup': 'https://coolzone-api.railway.app/lookup',
      'knowledge_search': 'https://n8n-cloudhosted.onrender.com/webhook/knowledge-search',
      'custom_function_1': 'https://coolzone-api.railway.app/schedule-service',
      'end_call': null
    };

    if (functionName === 'end_call') {
      return JSON.stringify({
        success: true,
        message: parameters.reason || "Thank you for calling CoolZone HVAC!"
      });
    }

    const webhookUrl = webhookEndpoints[functionName];
    if (!webhookUrl) {
      return JSON.stringify({ error: `No webhook configured for function: ${functionName}` });
    }

    try {
      // Enhanced request body with session context
      let requestBody;
      if (functionName === 'check_avail_cal') {
        requestBody = {
          args: {
            start: parameters.start,
            end: parameters.end
          },
          function_name: functionName,
          company: 'CoolZone HVAC',
          assistant: 'Emily',
          session_context: this.sessionData,
          timestamp: new Date().toISOString()
        };
      } else {
        requestBody = {
          function_name: functionName,
          parameters: parameters,
          company: 'CoolZone HVAC',
          assistant: 'Emily',
          session_context: this.sessionData,
          timestamp: new Date().toISOString()
        };
      }

      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'CoolZone HVAC-Emily-LLM-Client'
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      // Store the response data for future use
      this.updateSessionData(functionName, result);
      
      return JSON.stringify(result);
    } catch (error) {
      console.error(`Error calling ${functionName} for CoolZone HVAC:`, error);
      return JSON.stringify({
        error: `Failed to execute ${functionName}`,
        details: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  // ESSENTIAL METHODS - Required by server.ts with Enhanced Context
  private ConversationToChatRequestMessages(conversation: Utterance[]) {
    const result: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [];
    for (const turn of conversation) {
      result.push({
        role: turn.role === "agent" ? "assistant" : "user",
        content: turn.content,
      });
    }
    return result;
  }

  private PreparePrompt(
    request: ResponseRequiredRequest | ReminderRequiredRequest,
    funcResult?: FunctionCall,
  ) {
    const transcript = this.ConversationToChatRequestMessages(request.transcript);
    const requestMessages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      {
        role: "system",
        content: this.systemPrompt,
      },
    ];

    // Add personalized context from session data
    const personalizedContext = this.getPersonalizedContext();
    if (personalizedContext) {
      requestMessages.push({
        role: "system",
        content: `Session Context: ${personalizedContext}`,
      });
    }

    if (this.contactSummary && this.contactSummary.trim()) {
      requestMessages.push({
        role: "assistant",
        content: this.contactSummary,
      });
    }

    for (const message of transcript) {
      requestMessages.push(message);
    }

    if (funcResult) {
      requestMessages.push({
        role: "assistant",
        content: null,
        tool_calls: [
          {
            id: funcResult.id,
            type: "function",
            function: {
              name: funcResult.funcName,
              arguments: JSON.stringify(funcResult.arguments),
            },
          },
        ],
      });
      requestMessages.push({
        role: "tool",
        tool_call_id: funcResult.id,
        content: funcResult.result || "",
      });
    }

    if (request.interaction_type === "reminder_required") {
      requestMessages.push({
        role: "user",
        content: "(Now the user has not responded in a while, you would say:)",
      });
    }

    return requestMessages;
  }

  // MAIN DRAFT RESPONSE METHOD - Required by server.ts with Enhanced Personalization
  async DraftResponse(
    request: ResponseRequiredRequest | ReminderRequiredRequest,
    ws: WebSocket,
    funcResult?: FunctionCall,
  ) {
    console.clear();
    console.log("req", request);

    if (request.interaction_type !== "response_required" && request.interaction_type !== "reminder_required") {
      return;
    }

    const requestMessages = this.PreparePrompt(request, funcResult);

    let funcCall: FunctionCall | undefined;
    let funcArguments = "";
    let toolCallHandled = false;

    try {
      const events = await this.client.chat.completions.create({
        model: "llama-3.1-8b-instant",
        messages: requestMessages,
        stream: true,
        temperature: 0.1,
        max_tokens: 200,
        frequency_penalty: 1.0,
        presence_penalty: 1.0,
        tools: this.functions,
      });

      for await (const event of events) {
        if (event.choices && event.choices.length >= 1) {
          const delta = event.choices[0].delta;
          if (!delta) continue;

          if (delta.tool_calls && delta.tool_calls.length > 0 && !toolCallHandled) {
            const toolCall = delta.tool_calls[0];
            if (toolCall.id && toolCall.function?.name) {
              funcArguments += toolCall.function.arguments || "";
              funcCall = {
                id: toolCall.id,
                funcName: toolCall.function.name,
                arguments: {},
              };
              continue;
            }
          } else if (funcCall && funcArguments && !toolCallHandled) {
            funcCall.arguments = JSON.parse(funcArguments);
            const functionResult = await this.handleFunctionCall(funcCall.funcName, funcCall.arguments);

            let parsedResult: any;
            try {
              parsedResult = JSON.parse(functionResult);
            } catch {
              parsedResult = { error: "Invalid response format" };
            }

            let responseContent = "";
            
            // Enhanced response handling with personalization
            const customerName = this.sessionData.contact?.firstName || "";
            const personalPrefix = customerName ? `${customerName}, ` : "";
            
            if (funcCall.funcName === "ghl_lookup" && parsedResult.success) {
              responseContent = `${personalPrefix}I found your information in our system. ${parsedResult.message || "How can I help you today?"}`;
            } else if (funcCall.funcName === "knowledge_search" && parsedResult.results) {
              responseContent = `${personalPrefix}I found some information that might help: ${parsedResult.summary || parsedResult.results[0]?.content || "Information available."}`;
            } else if (parsedResult.available) {
              responseContent = `${personalPrefix}Great! ${parsedResult.message || 'That time slot is available.'}`;
              if (parsedResult.suggested_times && Array.isArray(parsedResult.suggested_times) && parsedResult.suggested_times.length > 0) {
                responseContent += ` I also have these alternative times available: ${parsedResult.suggested_times.join(", ")}.`;
              }
            } else if (parsedResult.success) {
              responseContent = `${personalPrefix}${parsedResult.message || "I've processed your request successfully."}`;
            } else {
              responseContent = `${personalPrefix}I'm sorry, that time slot isn't available. Let me suggest some alternatives.`;
              if (parsedResult.suggested_times && Array.isArray(parsedResult.suggested_times) && parsedResult.suggested_times.length > 0) {
                responseContent += ` How about: ${parsedResult.suggested_times.join(", ")}?`;
              }
            }

            const res: CustomLlmResponse = {
              response_type: "response",
              response_id: request.response_id,
              content: responseContent,
              content_complete: true,
              end_call: false,
            };
            ws.send(JSON.stringify(res));
            toolCallHandled = true;
            break;
          } else if (delta.content && !toolCallHandled) {
            const res: CustomLlmResponse = {
              response_type: "response",
              response_id: request.response_id,
              content: delta.content,
              content_complete: false,
              end_call: false,
            };
            ws.send(JSON.stringify(res));
          }
        }
      }
    } catch (err) {
      console.error("Error in gpt stream: ", err);
    } finally {
      if (funcCall && funcCall.funcName === "end_call") {
        const customerName = this.sessionData.contact?.firstName || "";
        const personalizedGoodbye = customerName ? `Thank you ${customerName} for calling CoolZone HVAC!` : "Thank you for calling CoolZone HVAC!";
        const res: CustomLlmResponse = {
          response_type: "response",
          response_id: request.response_id,
          content: personalizedGoodbye,
          content_complete: true,
          end_call: true,
        };
        ws.send(JSON.stringify(res));
      }
    }
  }
}
