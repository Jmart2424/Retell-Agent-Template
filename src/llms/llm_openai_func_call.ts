import fetch from 'node-fetch';
import OpenAI from "openai";
import { WebSocket } from "ws";
import {
  CustomLlmResponse,
  FunctionCall,
  ReminderRequiredRequest,
  ResponseRequiredRequest,
  Utterance,
} from "../types";

// PestAway Solutions - Simon LLM Client
// Generated by LLM Template Customizer
export class DemoLlmClient {
  private client: OpenAI;
  private contactSummary = "";
  
  // Enhanced Data Management System
  private sessionData: {
    contact?: any;
    knowledgeBase?: any[];
    calendarData?: any;
    customData?: { [key: string]: any };
  } = {};

  constructor() {
    this.client = new OpenAI({
      apiKey: process.env.OPENAI_APIKEY,
      baseURL: "https://api.groq.com/openai/v1",
    });
  }

  // CUSTOM SYSTEM PROMPT FOR Simon AT PestAway Solutions
  private systemPrompt = `You are a helpful assistant representing the company. Be professional and friendly.`;

  // Data Management Methods
  private updateSessionData(functionName: string, data: any): void {
    switch (functionName) {
      case "ghl_lookup":
        this.sessionData.contact = data.contact || data;
        this.updateContactSummary();
        break;
      case "knowledge_search":
        if (!this.sessionData.knowledgeBase) this.sessionData.knowledgeBase = [];
        this.sessionData.knowledgeBase.push(data);
        break;
      case "check_avail_cal":
        this.sessionData.calendarData = data;
        break;
      default:
        if (!this.sessionData.customData) this.sessionData.customData = {};
        this.sessionData.customData[functionName] = data;
    }
  }

  private updateContactSummary(): void {
    const contact = this.sessionData.contact;
    if (contact) {
      let summary = `Contact: ${contact.firstName || ""} ${contact.lastName || ""}`;
      if (contact.email) summary += `, Email: ${contact.email}`;
      if (contact.phone) summary += `, Phone: ${contact.phone}`;
      if (contact.serviceHistory) summary += `, Service History: ${Array.isArray(contact.serviceHistory) ? contact.serviceHistory.join(", ") : contact.serviceHistory}`;
      this.contactSummary = summary;
    }
  }

  private getPersonalizedContext(): string {
    let context = "";
    if (this.sessionData.contact) {
      const c = this.sessionData.contact;
      context += `Customer: ${c.firstName || ""} ${c.lastName || ""}. `;
      if (c.serviceHistory) context += `Previous services: ${Array.isArray(c.serviceHistory) ? c.serviceHistory.join(", ") : c.serviceHistory}. `;
    }
    if (this.sessionData.knowledgeBase && this.sessionData.knowledgeBase.length > 0) {
      context += "Available knowledge: " + this.sessionData.knowledgeBase.map(kb => kb.summary || kb.title || "Information available").join(", ") + ". ";
    }
    return context;
  }

  // CUSTOM GREETING LOGIC FOR Simon
  BeginMessage(ws: WebSocket, contactJson: any = {}) {
    let contact: any = {};
    try {
      contact = contactJson.contact ?? contactJson.data ?? contactJson;
    } catch {
      contact = {};
    }

    const firstName = contact.firstName || contact.first_name || "";

    // Store initial contact data
    if (contact && Object.keys(contact).length > 0) {
      this.sessionData.contact = contact;
      this.updateContactSummary();
    }

    // Simon greeting for PestAway Solutions
    const greeting = `Hi, this is Sarah with TechSupport Pro. How can I help you today?`;

    const res: CustomLlmResponse = {
      response_type: "response",
      response_id: 0,
      content: greeting,
      content_complete: true,
      end_call: false,
    };
    ws.send(JSON.stringify(res));
  }

  // Function definitions for PestAway Solutions
  private functions: OpenAI.Chat.Completions.ChatCompletionTool[] = [
    {
      type: "function",
      function: {
        name: "check_avail_cal",
        description: "Check calendar availability for appointment through Cal.com for PestAway Solutions",
        parameters: {
          type: "object",
          properties: {
            start: { type: "string", description: "Start time range in ISO 8601 format" },
            end: { type: "string", description: "End time range in ISO 8601 format" }
          },
          required: ["start", "end"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "ghl_lookup",
        description: "Lookup contact information in PestAway Solutions database using GoHighLevel for personalization",
        parameters: {
          type: "object",
          properties: {
            phone: { type: "string", description: "Phone number to lookup" },
            email: { type: "string", description: "Email address to lookup" },
            name: { type: "string", description: "Customer name to lookup" }
          },
          required: ["phone"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "knowledge_search",
        description: "Search PestAway Solutions knowledge base when customer asks about company information, services, policies, procedures, or wants to know about the company. Use this when customer says things like 'tell me about your company', 'what services do you offer', 'company information', or asks general questions about PestAway Solutions",
        parameters: {
          type: "object",
          properties: {
            query: { 
              type: "string", 
              description: "The customer's question or what they want to know about the company. Examples: 'company information', 'services offered', 'about your company', 'what do you do'" 
            },
            category: { 
              type: "string", 
              description: "Category of information requested (optional): services, about, policies, contact, general" 
            }
          },
          required: ["query"]
        }
      }
    },
    {
      type: "function",
      function: {
        name: "end_call",
        description: "End the call gracefully for PestAway Solutions",
        parameters: {
          type: "object",
          properties: {
            reason: { type: "string" }
          },
          required: ["reason"]
        }
      }
    }
  ];

  // KNOWLEDGE BASE ID MAPPING
  private knowledgeBaseMapping: { [key: string]: string } = {
    'Greenline Landscaping': 'knowledge_base_652ec0f35dbff57c',
    'Chop Details and Wraps': 'knowledge_base_649fac5906830726',
    'PestAway Solutions': 'knowledge_base_2a49b80dc103beb7',
    'CoolZone HVAC': 'knowledge_base_0101d490bcf05719',
    'United Financial': 'knowledge_base_32cbd40a19573cd2',
    'AFN': 'knowledge_base_5577315e5b38f822'
  };

  private getKnowledgeBaseId(): string | null {
    const companyName = 'PestAway Solutions';
    return this.knowledgeBaseMapping[companyName] || null;
  }

  // WEBHOOK CONFIGURATION FOR PestAway Solutions
  private async handleFunctionCall(functionName: string, parameters: any): Promise<string> {
    const webhookEndpoints: { [key: string]: string | null } = {
      'check_avail_cal': null,
      'ghl_lookup': null,
      'knowledge_search': 'https://n8n-cloudhosted.onrender.com/webhook-test/knowledge-search',
      'end_call': null
    };

    if (functionName === 'end_call') {
      return JSON.stringify({
        success: true,
        message: parameters.reason || "Thank you for calling PestAway Solutions!"
      });
    }

    const webhookUrl = webhookEndpoints[functionName];
    if (!webhookUrl) {
      return JSON.stringify({ error: `No webhook configured for function: ${functionName}` });
    }

    try {
      let requestBody;
      if (functionName === 'check_avail_cal') {
        requestBody = {
          args: {
            start: parameters.start,
            end: parameters.end
          },
          function_name: functionName,
          company: 'PestAway Solutions',
          assistant: 'Simon',
          session_context: this.sessionData,
          timestamp: new Date().toISOString()
        };
      } else {
        requestBody = {
          function_name: functionName,
          parameters: parameters,
          company: 'PestAway Solutions',
          assistant: 'Simon',
          session_context: this.sessionData,
          timestamp: new Date().toISOString()
        };

        // Add knowledge base ID for knowledge_search function
        if (functionName === 'knowledge_search') {
          const knowledgeBaseId = this.getKnowledgeBaseId();
          if (knowledgeBaseId) {
            requestBody.knowledge_base_id = knowledgeBaseId;
            requestBody.parameters.knowledge_base_id = knowledgeBaseId;
          }
        }
      }

      const response = await fetch(webhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'PestAway Solutions-Simon-LLM-Client'
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      this.updateSessionData(functionName, result);
      return JSON.stringify(result);
    } catch (error) {
      console.error(`Error calling ${functionName} for PestAway Solutions:`, error);
      return JSON.stringify({
        error: `Failed to execute ${functionName}`,
        details: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  // ESSENTIAL METHODS - Required by server.ts
  private ConversationToChatRequestMessages(conversation: Utterance[]) {
    const result: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [];
    for (const turn of conversation) {
      result.push({
        role: turn.role === "agent" ? "assistant" : "user",
        content: turn.content,
      });
    }
    return result;
  }

  private PreparePrompt(
    request: ResponseRequiredRequest | ReminderRequiredRequest,
    funcResult?: FunctionCall,
  ) {
    const transcript = this.ConversationToChatRequestMessages(request.transcript);
    const requestMessages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      {
        role: "system",
        content: this.systemPrompt,
      },
    ];

    // Add personalized context
    const personalizedContext = this.getPersonalizedContext();
    if (personalizedContext) {
      requestMessages.push({
        role: "system",
        content: `Session Context: ${personalizedContext}`,
      });
    }

    if (this.contactSummary && this.contactSummary.trim()) {
      requestMessages.push({
        role: "assistant",
        content: this.contactSummary,
      });
    }

    for (const message of transcript) {
      requestMessages.push(message);
    }

    if (funcResult) {
      requestMessages.push({
        role: "assistant",
        content: null,
        tool_calls: [
          {
            id: funcResult.id,
            type: "function",
            function: {
              name: funcResult.funcName,
              arguments: JSON.stringify(funcResult.arguments),
            },
          },
        ],
      });
      requestMessages.push({
        role: "tool",
        tool_call_id: funcResult.id,
        content: funcResult.result || "",
      });
    }

    if (request.interaction_type === "reminder_required") {
      requestMessages.push({
        role: "user",
        content: "(Now the user has not responded in a while, you would say:)",
      });
    }

    return requestMessages;
  }

  // MAIN DRAFT RESPONSE METHOD - Required by server.ts
  async DraftResponse(
    request: ResponseRequiredRequest | ReminderRequiredRequest,
    ws: WebSocket,
    funcResult?: FunctionCall,
  ) {
    console.clear();
    console.log("req", request);

    if (request.interaction_type !== "response_required" && request.interaction_type !== "reminder_required") {
      return;
    }

    const requestMessages = this.PreparePrompt(request, funcResult);

    let funcCall: FunctionCall | undefined;
    let funcArguments = "";
    let toolCallHandled = false;

    try {
      const events = await this.client.chat.completions.create({
        model: "llama-3.1-8b-instant",
        messages: requestMessages,
        stream: true,
        temperature: 0.1,
        max_tokens: 200,
        frequency_penalty: 1.0,
        presence_penalty: 1.0,
        tools: this.functions,
      });

      for await (const event of events) {
        if (event.choices && event.choices.length >= 1) {
          const delta = event.choices[0].delta;
          if (!delta) continue;

          if (delta.tool_calls && delta.tool_calls.length > 0 && !toolCallHandled) {
            const toolCall = delta.tool_calls[0];
            if (toolCall.id && toolCall.function?.name) {
              funcArguments += toolCall.function.arguments || "";
              funcCall = {
                id: toolCall.id,
                funcName: toolCall.function.name,
                arguments: {},
              };
              continue;
            }
          } else if (funcCall && funcArguments && !toolCallHandled) {
            funcCall.arguments = JSON.parse(funcArguments);
            const functionResult = await this.handleFunctionCall(funcCall.funcName, funcCall.arguments);

            let parsedResult: any;
            try {
              parsedResult = JSON.parse(functionResult);
            } catch {
              parsedResult = { error: "Invalid response format" };
            }

            let responseContent = "";
            const customerName = this.sessionData.contact?.firstName || "";
            const personalPrefix = customerName ? `${customerName}, ` : "";
            
            if (funcCall.funcName === "ghl_lookup" && parsedResult.success) {
              responseContent = `${personalPrefix}I found your information in our system. ${parsedResult.message || "How can I help you today?"}`;
            } else if (funcCall.funcName === "knowledge_search" && parsedResult.results) {
              responseContent = `${personalPrefix}I found some information that might help: ${parsedResult.summary || parsedResult.results[0]?.content || "Information available."}`;
            } else if (parsedResult.available) {
              responseContent = `${personalPrefix}Great! ${parsedResult.message || 'That time slot is available.'}`;
              if (parsedResult.suggested_times && Array.isArray(parsedResult.suggested_times) && parsedResult.suggested_times.length > 0) {
                responseContent += ` I also have these alternative times available: ${parsedResult.suggested_times.join(", ")}.`;
              }
            } else if (parsedResult.success) {
              responseContent = `${personalPrefix}${parsedResult.message || "I've processed your request successfully."}`;
            } else {
              responseContent = `${personalPrefix}I'm sorry, that time slot isn't available. Let me suggest some alternatives.`;
              if (parsedResult.suggested_times && Array.isArray(parsedResult.suggested_times) && parsedResult.suggested_times.length > 0) {
                responseContent += ` How about: ${parsedResult.suggested_times.join(", ")}?`;
              }
            }

            const res: CustomLlmResponse = {
              response_type: "response",
              response_id: request.response_id,
              content: responseContent,
              content_complete: true,
              end_call: false,
            };
            ws.send(JSON.stringify(res));
            toolCallHandled = true;
            break;
          } else if (delta.content && !toolCallHandled) {
            const res: CustomLlmResponse = {
              response_type: "response",
              response_id: request.response_id,
              content: delta.content,
              content_complete: false,
              end_call: false,
            };
            ws.send(JSON.stringify(res));
          }
        }
      }
    } catch (err) {
      console.error("Error in gpt stream: ", err);
    } finally {
      if (funcCall && funcCall.funcName === "end_call") {
        const customerName = this.sessionData.contact?.firstName || "";
        const personalizedGoodbye = customerName ? `Thank you ${customerName} for calling PestAway Solutions!` : "Thank you for calling PestAway Solutions!";
        const res: CustomLlmResponse = {
          response_type: "response",
          response_id: request.response_id,
          content: personalizedGoodbye,
          content_complete: true,
          end_call: true,
        };
        ws.send(JSON.stringify(res));
      }
    }
  }
}
